using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;
using System.Threading;

namespace MultithreadingWorkloadsDistribution
{
    class Program
    {
        public static class_mulithreading_List mySharedList_multithreads = new class_mulithreading_List();
        public static class_mulithreading_Queue mySharedQueue_multithreads = new class_mulithreading_Queue();
        public static class_mulithreading_Stack mySharedStack_multithreads = new class_mulithreading_Stack();
        public static class_mulithreading_PriorityQueue mySharedPriority_multithreads = new class_mulithreading_PriorityQueue();

        static void Main(string[] args)
        {
            int number_of_Program_Threads = Environment.ProcessorCount - 1;
            class_PrintNumber[] myMessagePrinter_class = new class_PrintNumber[number_of_Program_Threads];
            Thread[] ConsumerThreadsArray = new Thread[number_of_Program_Threads];
            Thread ProducerThread = new Thread(new ThreadStart(addTasks));

            for (int i = 0; i < number_of_Program_Threads; i++)
            {
                myMessagePrinter_class[i] = new class_PrintNumber(i + 1);
                ConsumerThreadsArray[i] = new Thread(new ThreadStart(myMessagePrinter_class[i].Print));
                ConsumerThreadsArray[i].Name = "WorkerID#" + i;
            }

            ProducerThread.Start();
            foreach (Thread t in ConsumerThreadsArray)
                t.Start();

            ProducerThread.Join();
            foreach (Thread t in ConsumerThreadsArray)
                t.Join();
            // Join both threads with no timeout
            // Run both until done.
            // threads have finished at this point.

            Console.WriteLine("\nFinished!");

            Console.Read();
        }

        static void addTasks()
        {
            for (int i = 1; i <= 10000; i++)
            {
                mySharedList_multithreads.Add(i);
                //mySharedQueue_multithreads.Enqueue(i);
                //mySharedStack_multithreads.Push(i);
                //mySharedPriority_multithreads.Add(i, i);
            }

            Thread.Sleep(5000);

            for (int i = 10001; i <= 20000; i++)
            {
                mySharedList_multithreads.Add(i);
                //mySharedQueue_multithreads.Enqueue(i);
                //mySharedStack_multithreads.Push(i);
                //mySharedPriority_multithreads.Add(i, i);
                Thread.Sleep(1);
            }
        }

        public class class_mulithreading_List
        {
            private List<int> List_multithreads;
            private static Random random = new Random();
            private int TagNumber, ListIndex;
            private bool isLocked;

            public class_mulithreading_List()
            {
                isLocked = false;
                List_multithreads = new List<int>();
            }

            public void Add(int theTagNumber)
            {
                Monitor.Enter(this);            //obtain lock on this object

                //if other thread is at present reading / editing this object (isLocked == true), place invoking thread in WaitSleepJoin state
                if (isLocked)
                    Monitor.Wait(this);         //enter WaitSleepJoin state

                isLocked = true;
                try
                {
                    List_multithreads.Add(theTagNumber);
                }
                finally
                {
                    isLocked = false;
                    Monitor.Pulse(this);        //tell waiting thread(if there is one) to become ready to execute (Running state)
                    Monitor.Exit(this);         //release lock on this object
                }
            }

            public bool Any()
            {
                bool _Any = false;

                Monitor.Enter(this);            //obtain lock on this object

                //if other thread is at present reading / editing this object (isLocked == true), place invoking thread in WaitSleepJoin state
                if (isLocked)
                    Monitor.Wait(this);         //enter WaitSleepJoin state

                isLocked = true;
                try
                {
                    _Any = List_multithreads.Any();
                }
                finally
                {
                    isLocked = false;
                    Monitor.Pulse(this);        //tell waiting thread(if there is one) to become ready to execute (Running state)
                    Monitor.Exit(this);         //release lock on this object
                }

                return _Any;
            }

            public int RandomRemove()
            {
                bool Any = false;

                Monitor.Enter(this);            //obtain lock on this object

                while (!Any)
                {
                    if (!List_multithreads.Any())
                        Monitor.Wait(this);

                    //if other thread is at present reading / editing this object (isLocked == true), place invoking thread in WaitSleepJoin state
                    if (isLocked)
                        Monitor.Wait(this);             //enter WaitSleepJoin state
                    isLocked = true;

                    try
                    {
                        if (List_multithreads.Any())
                        {
                            ListIndex = random.Next(0, List_multithreads.Count() - 1);
                            TagNumber = List_multithreads.ElementAtOrDefault(ListIndex);
                            List_multithreads.RemoveAt(ListIndex);
                            Any = true;
                        }
                    }
                    finally
                    {
                        isLocked = false;
                        if (List_multithreads.Any())
                            Monitor.Pulse(this);        //tell waiting thread(if there is one) to become ready to execute (Running state)
                    }
                }
                Monitor.Exit(this);                     //release lock on this object

                return TagNumber;
            }
        }

        public class class_mulithreading_Queue
        {
            private Queue<int> Queue_multithreads;
            private int TagNumber;
            private bool isLocked;

            public class_mulithreading_Queue()
            {
                isLocked = false;
                Queue_multithreads = new Queue<int>();
            }

            public bool Any()
            {
                bool _Any;

                Monitor.Enter(this);                    //obtain lock on this object

                //if other thread is at present reading / editing this object (isLocked == true), place invoking thread in WaitSleepJoin state
                if (isLocked)
                    Monitor.Wait(this);                 //enter WaitSleepJoin state


                isLocked = true;
                try
                {
                    _Any = Queue_multithreads.Any();
                }
                finally
                {
                    isLocked = false;
                    Monitor.Pulse(this);                //tell waiting thread(if there is one) to become ready to execute (Running state)
                    Monitor.Exit(this);                 //release lock on this object
                }

                return _Any;
            }

            public void Enqueue(int theTagNumber)
            {
                Monitor.Enter(this);                            //obtain lock on this object

                //if other thread is at present reading / editing this object (isLocked == true), place invoking thread in WaitSleepJoin state
                if (isLocked)
                    Monitor.Wait(this);                         //enter WaitSleepJoin state

                isLocked = true;
                try
                {
                    Queue_multithreads.Enqueue(theTagNumber);
                }
                finally
                {
                    isLocked = false;
                    Monitor.Pulse(this);                        //tell waiting thread(if there is one) to become ready to execute (Running state)
                    Monitor.Exit(this);                         //release lock on this object
                }
            }

            public int Dequeue()
            {
                bool Any = false;

                Monitor.Enter(this);                            //obtain lock on this object
                while (!Any)
                {
                    if (!Queue_multithreads.Any())
                        Monitor.Wait(this);

                    //if other thread is at present reading / editing this object (isLocked == true), place invoking thread in WaitSleepJoin state
                    if (isLocked)
                        Monitor.Wait(this);                     //enter WaitSleepJoin state
                    isLocked = true;

                    try
                    {
                        if (Queue_multithreads.Any())
                        {
                            TagNumber = Queue_multithreads.Dequeue();
                            Any = true;
                        }
                    }
                    finally
                    {
                        isLocked = false;
                        if (Queue_multithreads.Any())
                            Monitor.Pulse(this);                //tell waiting thread(if there is one) to become ready to execute (Running state)
                    }
                }
                Monitor.Exit(this);                             //release lock on this object

                return TagNumber;
            }
        }

        public class class_mulithreading_Stack
        {
            private Stack<int> Stack_multithreads = new Stack<int>();
            private int TagNumber;
            private bool isLocked;

            public class_mulithreading_Stack()
            {
                isLocked = false;
            }

            public bool Any()
            {
                bool _Any;

                Monitor.Enter(this);                        //obtain lock on this object

                //if other thread is at present reading / editing this object (isLocked == true), place invoking thread in WaitSleepJoin state
                if (isLocked)
                    Monitor.Wait(this);                     //enter WaitSleepJoin state


                isLocked = true;
                try
                {
                    _Any = Stack_multithreads.Any();
                }
                finally
                {
                    isLocked = false;
                    Monitor.Pulse(this);                    //tell waiting thread(if there is one) to become ready to execute (Running state)
                    Monitor.Exit(this);                     //release lock on this object
                }

                return _Any;
            }

            public void Push(int theTagNumber)
            {
                Monitor.Enter(this);                        //obtain lock on this object

                //if other thread is at present reading / editing this object (isLocked == true), place invoking thread in WaitSleepJoin state
                if (isLocked)
                    Monitor.Wait(this);                     //enter WaitSleepJoin state

                isLocked = true;
                try
                {
                    Stack_multithreads.Push(theTagNumber);
                }
                finally
                {
                    isLocked = false;
                    Monitor.Pulse(this);                    //tell waiting thread(if there is one) to become ready to execute (Running state)
                    Monitor.Exit(this);                     //release lock on this object
                }
            }

            public int Pop()
            {
                bool Any = false;

                Monitor.Enter(this);                        //obtain lock on this object

                while (!Any)
                {
                    if (!Stack_multithreads.Any())
                        Monitor.Wait(this);

                    //if other thread is at present reading / editing this object (isLocked == true), place invoking thread in WaitSleepJoin state
                    if (isLocked)
                        Monitor.Wait(this);                 //enter WaitSleepJoin state
                    isLocked = true;

                    try
                    {
                        if (Stack_multithreads.Any())
                        {
                            TagNumber = Stack_multithreads.Pop();
                            Any = true;
                        }
                    }
                    finally
                    {
                        isLocked = false;
                        if (Stack_multithreads.Any())
                            Monitor.Pulse(this);            //tell waiting thread(if there is one) to become ready to execute (Running state)
                    }
                }
                Monitor.Exit(this);                         //release lock on this object

                return TagNumber;
            }
        }

        public class class_mulithreading_PriorityQueue
        {
            //In 'PriorityQueue_multithreads', key is the Priority Level, value is the Tag Number.
            private SortedList<int, int> PriorityQueue_multithreads = new SortedList<int, int>();
            private int TagNumber;
            private bool isLocked;

            public class_mulithreading_PriorityQueue()
            {
                isLocked = false;
            }

            public bool Any()
            {
                bool _Any;

                Monitor.Enter(this);                        //obtain lock on this object

                //if other thread is at present reading / editing this object (isLocked == true), place invoking thread in WaitSleepJoin state
                if (isLocked)
                    Monitor.Wait(this);                     //enter WaitSleepJoin state


                isLocked = true;
                try
                {
                    _Any = PriorityQueue_multithreads.Any();
                }
                finally
                {
                    isLocked = false;
                    Monitor.Pulse(this);                    //tell waiting thread(if there is one) to become ready to execute (Running state)
                    Monitor.Exit(this);                     //release lock on this object
                }

                return _Any;
            }

            public void Add(int PriorityLevel, int theTagNumber)
            {
                Monitor.Enter(this);                        //obtain lock on this object

                //if other thread is at present reading / editing this object (isLocked == true), place invoking thread in WaitSleepJoin state
                if (isLocked)
                    Monitor.Wait(this);                     //enter WaitSleepJoin state
                isLocked = true;

                try
                {
                    PriorityQueue_multithreads.Add(PriorityLevel, theTagNumber);
                }
                finally
                {
                    isLocked = false;
                    Monitor.Pulse(this);                    //tell waiting thread(if there is one) to become ready to execute (Running state)
                    Monitor.Exit(this);                     //release lock on this object
                }
            }

            public int Remove()
            {
                bool Any = false;

                Monitor.Enter(this);                        //obtain lock on this object
                while (!Any)
                {
                    if (!PriorityQueue_multithreads.Any())
                        Monitor.Wait(this);

                    //if other thread is at present reading / editing this object (isLocked == true), place invoking thread in WaitSleepJoin state
                    if (isLocked)
                        Monitor.Wait(this);                 //enter WaitSleepJoin state
                    isLocked = true;

                    try
                    {
                        if (PriorityQueue_multithreads.Any())
                        {
                            TagNumber = PriorityQueue_multithreads.ElementAtOrDefault(0).Value;
                            //Alway remove the first node from PriorityQueue, presuming nodes at front have highest priority
                            PriorityQueue_multithreads.RemoveAt(0);
                            Any = true;
                        }
                    }
                    finally
                    {
                        isLocked = false;
                        if (PriorityQueue_multithreads.Any())
                            Monitor.Pulse(this);            //tell waiting thread(if there is one) to become ready to execute (Running state)
                    }
                }
                Monitor.Exit(this);                         //release lock on this object

                return TagNumber;
            }
        }

        class class_PrintNumber
        {
            private int threadID;

            public class_PrintNumber(int _threadID)
            {
                threadID = _threadID;
            }

            public void Print()
            {
                int myNumber;

                while (true)
                {
                    myNumber = mySharedList_multithreads.RandomRemove();
                    //myNumber = mySharedQueue_multithreads.Dequeue();
                    //myNumber = mySharedStack_multithreads.Pop();
                    //myNumber = mySharedPriority_multithreads.Remove();
                    Console.WriteLine("threadID: " + threadID + ", Number: " + myNumber);
                }
            }
        }
    }
}